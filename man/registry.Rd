% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/registry.R
\docType{class}
\name{registry}
\alias{registry}
\alias{registry}
\title{A persistent on-disk cache of R objects associated with a directory.}
\arguments{
\item{root}{character. The root of the registry. If it does not exist,
it (and any not yet existent parent directories) will be created.}

\item{key}{character. The path relative to the registry's root.}

\item{...}{additional keys which will be joined together with
code \code{base::file.path}. Thus, if you \code{get('a','b')},
you are asking for key \code{'a/b'}.}

\item{soft}{logical. Whether or not to error if the registry key
requested does not exist. If \code{soft = TRUE} and the latter
condition holds, \code{NULL} will be returned instead. The
default is \code{soft = TRUE}.}

\item{key}{character. The path relative to the registry's root.}

\item{value}{ANY. Some R object to serialize into the registry.}

\item{key}{character. The registry key to sanitize. Note that
this will determine an actual file structure, so if the
the key \code{'foo/bar'} is used, an actual directory
\code{'foo'} will be created inside the registry's root.}

\item{read}{logical. Whether a read or write operation is being
performed on the registry. In the former scenario, this method
tests that an associated filename exists. In case of a write 
operation, the requisite directories are created. Thus,
setting \code{"nonexistent/file"} will error if \code{read = TRUE},
but create the \code{"nonexistent"} directory if \code{tread = FALSE}.
The default is \code{read = TRUE}.}

\item{soft}{logical. Whether or not to error if \code{read = TRUE} and
the filename implied by \code{key} does not exist. If you try to
create a key one of whose parent directories is actually a file
while \code{read = FALSE}, it will still error however. For example,
sanitizing key \code{"foo/bar/baz"} when \code{"foo/bar"} is a file
with \code{read = FALSE} results in an error. The default is
\code{TRUE}.}
}
\value{
an R object stored in the registry under the given \code{key}.
   This will be serialized as an RDS file relative to the root of
   the registry. If \code{soft = TRUE}, \code{NULL} may be returned
   if the \code{key} does not point to a valid registry key.

a character representing the sanitized key.
}
\description{
Having a registry attached to a project is very helpful for maintaining
state across R sessions without encoding everything in the unreliable
\code{.RData} file.
}
\details{
To create a registry, simply write \code{r <- registry("some/directory")}.
You can then use \code{r$set('some/key', some_value)} and
\code{r$get('some/key')} to set and retrieve values (arbitrary R objects).
}
\section{Methods}{

\describe{
\item{\code{initialize(root = NULL)}}{Initialize a registry.}
}}

\examples{
\dontrun{
  r <- registry('some/dir') # Create "some/dir" and make a registry there.
  r$set('some/key', value <- list(1,2,3))
  stopifnot(r$get('some/key'), value)
}
Initialize a registry. A registry is responsible for maintaining
an on-disk cache of R objects (configuration, temporary storage,
associated with a directory).

r <- registry(dirname(tempfile))
r$set("example/key", "example_value")
# The directory "example" was created under the registry"s root
# with a filename "key" that holds the string "example_value".
stopifnot(registry$get("example", "key") == "example_value")
Sanitize a registry key to ensure it can point to a filename.

\dontrun{
  r <- registry(dirname(tempfile()))
  r$.sanitize_key('nonexistent/file') # This will complain
  r$.sanitize_key('nonexistent/file', read = FALSE)
  # This will create the `nonexistent` directory in the registry root.
}
}
